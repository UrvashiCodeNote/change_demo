c
user
c
 WelcomeEmailJob.perform_later(@user)
WelcomeEmailJob.perform_later
n
@user 
n
c
UserMailer.welcome_email(self).deliver_now
UserMailer.welcome_email(user).deliver_now
user
c
 @customer_details.address
 @customer_details.class
    @customer_details = @customer.includes([:addresses],[:contact_books])
n
c
 @customer_details = @customer.includes([:addresses],[:contact_books])
n
c
  @customer_details
n
 @customer = Customer.all 
c
 @customer.includes([:addresses],[:contact_books])
 @customer.includes([:addresses])
 @customer.includes([:addresses],[:contact_books])
 @customer.includes([:addresses])
 Customers.all
 Customers.all.includes([:addresses])
@customer.addresses
@customer
@customer.addresses
@customer .addresses
@customer 
@customer = Customer.all 
c
n
  @address = @customer.addresses
n
@customer = Customer.all
c
@customer.contact_books
n
@customer.addresses
n
 @customer.addresses
 @customer.ddresses
 @customer = Customer.all
c
ran
n
ran
n
ran
ContactBook.where("created_at  >= ?", 1.hours.ago)
c
ContactBook.where(created_at: Time.now..60.minute.ago)
ContactBook.where(created_at: Time.now..20.minute.ago)
ContactBook.where("created_at <= ?" Time.now..20.minute.ago)
ContactBook.where(created_at: Time.now..20.minute.ago)
c
@customer.email
n
@customer = customer
customer
c
UserMailer.welcome_email(self)
UserMailer.welcome_emailUserMailer.welcome_email(self)
UserMailer.welcome_email
self
c
 @customer = customer.phone 
customer
c
contact_books.activated
contact_books.status == "pending"
contact_books
self
continue
self
c.sim_activated
c = Customer.last
c.sim_activated
c = Customer.last.contact_books
c = Customer.last.contact_book
c = Customer.last
Customer
o.contact_books
Customer
Customer.contact_books
o
o = Customer
Customer.contact_books
Customer.status
Customer
customer.status
self.inspect
c
@customer.email
@customer = customer
customer
c
 params[:customer]
c
@customer.email
 @customer = params[:customer]
 params[:customer]
c
continue
contact_params
params
@phone_no
continue
params
contact_params[:phone]
contact_params
address_params
continue
params
paramss
continue
c
params
n
params
c
 @customer.phone
contact_params[:phone]
c
 @customer.phone
 @customer
c
@customer.phone
c
contact_params
c
  @customer.phone
contact_params
  @customer.contact_books.new(contact_params)
c
n
c
contact_params
n
@customer.auto
@customer
c
n
@service_provider
n
c
n
address_params
 @customer
n
@customer = @service_provider.customers.build(customer_params.merge(user_id: current_user.id))
n
@service_provider
n
current_user.service_provider
c
 @phone_no.present?
n
c
n
@phone_no.present?
n
c
n
@phone_no =  ContactBook.find_by(phone: generate_number )
c
  @phone_no.present?
format
n
  @phone_no =  ContactBook.find_by(phone: generate_number )
c
 flash.now[:notice] = "not present in database ."
 flash.now[:notice]
n
 phone_no.present?
n
 phone_no =  ContactBook.find_by(phone: generate_number )
c
C
c
n
c
n
 phone_no =  ContactBook.find_by(phone: generate_number )
generate_number
c
continue
c
@customer
c
 @customer = Customer.new
 <%= button_to "Verify Phone Number", { action: "verify" }, method: :post, remote: true, class: "verify-phone-btn", id: "varify_phone" %>
c
continue
c
continue
c
 Customer.new
c
continue
  @service_provider =  current_user.service_provider
c
obj.verify
obj =  CustomersController.new
c
@service_provider =  current_user.service_provider
c
phone_no.present?
n
n'
 ContactBook.find_by(phone: generate_number )
c
ContactBook.find_by(phone: generate_number ) 
 check = ContactBook.find_by(phone: generate_number ) 
 @phone_number = generate_number
 @phone_number
c
generate_number
c
n
m
n
c
   @phone_number = rand(7000000000..9999999999).to_i   
c
 contact.contactable
n
 contact.contactable
 contact.contactable =  customer
n
contact.contactable =  customer
 customer
 customer = Customer.new
n
   contact = ContactBook.new(phone: phone_number)
c
 contact.contactable = current_user 
contact
n
b
contact
n
 contact.contactable = current_user
ContactBook.new(phone: phone_number)
contact.nil?
n
 ContactBook.find_by(phone: phone_number)
n
c
